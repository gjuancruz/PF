generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comment {
  id      String @id @default(uuid()) @db.Uuid
  Text    String
  movieId String @db.Uuid
  userId  String @db.Uuid
  movie   Movie  @relation(fields: [movieId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
}

model Feedback {
  id       String @id @default(uuid()) @db.Uuid
  Text     String @db.Text
  userId   String @db.Uuid 
  user     User @relation(fields: [userId], references: [id])
}

model Movie {
  id       String    @id @default(uuid()) @db.Uuid
  Title    String    @unique
  Plot     String
  Genre    String
  Actors   String
  Language String
  Director String
  Release  String
  Poster   String
  Rated    String
  Trailer  String
  Runtime  Int
  Type     String
  comments Comment[]
  show     Show[]
}

model Room {
  id     Int      @id
  types  String
  seat   Seat[]
  show   Show[]
}

model Sale {
  id     String   @id @default(uuid()) @db.Uuid
  receipt String  @unique
  userId String   @db.Uuid
  salePrice Int
  createdAt DateTime @default(now())
  dateFormat String? @db.Text
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ticket Ticket[]
  candy  Candy[]
}

model Seat {
  id     Int     @id
  roomId Int
  room   Room    @relation(fields: [roomId], references: [id])
}

model Show {
  id        String   @id @default(uuid()) @db.Uuid
  schedule  String
  type      String
  day       String
  seats     Int
  roomId    Int      
  movieId   String   @db.Uuid 
  movie     Movie    @relation(fields: [movieId], references: [id])
  room      Room     @relation(fields: [roomId], references: [id])
  ticket    Ticket[]
  tickets   Tickets[]
}

model Ticket {
  id       String   @id @default(uuid()) @db.Uuid
  saleId   String   @db.Uuid
  showId   String   @db.Uuid
  sale     Sale @relation(fields: [saleId],references: [id])
  show     Show @relation(fields: [showId], references: [id])
  cart     Cart? 
}

model Tickets {
  id     String   @id @default(uuid()) @db.Uuid
  showId String?   @db.Uuid
  seats  Int     
  totalPrice  Int
  createdAt DateTime @default(now())
  dateFormat String? @db.Text
  userId  String   @db.Uuid
  cartId  String?   @db.Uuid
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cart    Cart?    @relation(fields: [cartId], references: [id])
  show    Show?    @relation(fields: [showId], references: [id])
}

model User {
  id       String @id @default(uuid()) @db.Uuid
  username String @unique @db.Text
  password String @db.Text
  role     String @db.Text
  email    String @unique
  createdAt DateTime @default(now())
  dateFormat String? @db.Text
  sale     Sale[]
  feedback Feedback[]
  comments Comment[]
  cart     Cart?
  tickets  Tickets[] 
}

model Candy {
  id         String @id @default(uuid()) @db.Uuid
  name       String @db.Text
  quantity   Int
  totalPrice Int
  cartId     String? @db.Uuid
  saleId     String? @db.Uuid 
  cart       Cart? @relation(fields: [cartId],references: [id])
  sale       Sale? @relation(fields: [saleId],references: [id])
}


model Cart{
  id         String @id @default(uuid()) @db.Uuid
  ticketId   String? @db.Uuid @unique
  userId     String @db.Uuid @unique
  orderPrice Int @default (0)
  candy      Candy[]
  tickets    Tickets[]
  ticket     Ticket? @relation(fields: [ticketId],references: [id])
  user       User @relation(fields: [userId],references: [id], onDelete: Cascade)
}

model Menu{
  id        Int @id @default(autoincrement())
  name      String @unique
  picture   String
  price     Int
  timestamp DateTime @updatedAt() 
}

enum Status {
  CREATED
  PROCESSING
  CANCELLED
  COMPLETED
}